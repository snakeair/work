<template>
  <div>
    <div class="chous">
      <div class="ch">
        <p class="item" :class="{cur: ids == 1}" >{{ list[0].name }}</p>
        <p class="item" :class="{cur: ids == 2}" >{{ list[1].name }}</p>
        <p class="item" :class="{cur: ids == 3}" >{{ list[2].name }}</p>
      </div>
      <div class="ch">
        <p class="item" :class="{cur: ids == 8}" >{{ list[7].name }}</p>
        <p @click=" get()">开始</p>
        <p class="item" :class="{cur: ids == 4}" >{{ list[3].name }}</p>
      </div>
      <div class="ch">
        <p class="item" :class="{cur: ids == 7}" >{{ list[6].name }}</p>
        <p class="item" :class="{cur: ids == 6}" >{{ list[5].name }}</p>
        <p class="item" :class="{cur: ids == 5}" >{{ list[4].name }}</p>
      </div>
    </div>

    <div class="round">
      <div class="round-box" :class="{move: move}" :style="{ transform : 'rotate(' + size + 'deg)' }"  ref="round" >
        <!-- <img src="@/assets/images/20213870747788.png" alt=""> -->
      </div>
    </div>

    <button @click="ting()">停止</button>

    
  </div>
</template>

<script setup lang="ts" >
const ids = ref<number>(0)
const list = ref([
  {
    id: 1,
    name: "奖品0",
    chance: 1,
  },
  {
    id: 2,
    name: "奖品1",
    chance: 10,
  },
  {
    id: 3,
    name: "奖品2",
    chance: 10,
  },
  {
    id: 4,
    name: "谢谢参与3",
    chance: 25,
  },
  {
    id: 5,
    name: "奖品4",
    chance: 5,
  },
  {
    id: 6,
    name: "奖品5",
    chance: 4,
  },
  {
    id: 7,
    name: "奖品6",
    chance: 1,
  },
  {
    id: 8,
    name: "谢谢参与7",
    chance: 25,
  },
]);
var quan = 6; // 圈数
var co = 0; // 记录圈数
var time = 300;  // 时间
let timer: any

let ars = 0; // 随机数
const getRandomInt = (min: number, max: number) => {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

const get = () => {
  ars = getRandomInt(1, 5);
  loopFn();
  roundFn()
}

const ting = () => {
  clearInterval(timer);
  move.value = false;
  size.value = 0
};


const loopFn = () => {
  if(timer) {
    clearInterval(timer)
  }
  timer = setInterval( function () {
    if(ids.value == list.value.length ) {
      ids.value = 1
      co++
    } else {
      ids.value += 1
    }
    if (co < quan - 2 && time > 100) {
      time -= 50
      loopFn()
    } 
    if(co > quan - 2 && time < 300) {
      time += 50
      loopFn()
    }
    if(co == quan && ids.value == ars) {
      clearInterval(timer)
      co = 0;
      time = 300;
      timer = null
    }
  }, time)
}

var cart = 40;
const move = ref<boolean>(false);
const size = ref<number>(0)
let round = ref<any>(null)
const roundFn = async () => {
  move.value = await true;
  size.value = 360 * 5 - 36 - 20
}




</script>

<style scoped lang="scss" >
.chous {
  width: 100%;
}

.ch {
  display: flex;
}

.chous p {
  line-height: 100px;
  text-align: center;
  margin: 2%;
  width: 100px;
  height: 100px;
  background-color: aqua;
  &.cur{
    background: blue !important;
  }
}

.round{
  width:70vw; height: 70vw;
  margin: 50px auto; 
  .round-box{
    width:100%; height:100%; border-radius: 50%;
    &.move{
      transition: all ease-in-out 3s;
    }
    img{
      width:100%; height:100%;
    }
  }
}
</style>